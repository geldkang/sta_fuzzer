diff -Nur --strip-trailing-cr sulley/sulley/sessions.py sulley.wifi_patch/sulley/sessions.py
--- sulley/sulley/sessions.py	2012-08-18 22:49:37.411722811 +0200
+++ sulley.wifi_patch/sulley/sessions.py	2012-08-18 22:21:05.838864733 +0200
@@ -122,7 +122,7 @@
         @type  log_level:          Integer
         @kwarg log_level:          (Optional, def=2) Set the log level, higher number == more log messages
         @type  proto:              String
-        @kwarg proto:              (Optional, def="tcp") Communication protocol ("tcp", "udp", "ssl")
+        @kwarg proto:              (Optional, def="tcp") Communication protocol ("tcp", "udp", "ssl", "wifi")
         @type  bind:               Tuple (host, port)
         @kwarg bind:               (Optional, def=random) Socket bind address and port
         @type  timeout:            Float
@@ -145,6 +145,8 @@
         self.proto               = proto.lower()
         self.bind                = bind
         self.ssl                 = False
+        self.wifi                = False
+        self.wifi_iface          = False
         self.restart_interval    = restart_interval
         self.timeout             = timeout
         self.web_port            = web_port
@@ -170,6 +172,10 @@
         elif self.proto == "udp":
             self.proto = socket.SOCK_DGRAM
 
+        elif self.proto == "wifi":
+            self.proto = socket.SOCK_RAW
+            self.wifi  = True
+
         else:
             raise sex.error("INVALID PROTOCOL SPECIFIED: %s" % self.proto)
 
@@ -420,26 +426,38 @@
                                 error_handler(e, "failed on netmon.pre_send()", target)
                                 continue
 
-                        try:
-                            # establish a connection to the target.
-                            sock = socket.socket(socket.AF_INET, self.proto)
-                        except Exception, e:
-                            error_handler(e, "failed creating socket", target)
-                            continue
-
-                        if self.bind:
+                        if self.proto == socket.SOCK_STREAM or self.proto == socket.SOCK_DGRAM:
                             try:
-                                sock.bind(self.bind)
+                                # establish a connection to the target.
+                                sock = socket.socket(socket.AF_INET, self.proto)
                             except Exception, e:
-                                error_handler(e, "failed binding on socket", target, sock)
+                                error_handler(e, "failed creating socket", target)
                                 continue
 
-                        try:
-                            sock.settimeout(self.timeout)
-                            sock.connect((target.host, target.port))
-                        except Exception, e:
-                            error_handler(e, "failed connecting on socket", target, sock)
-                            continue
+                            if self.bind:
+                                try:
+                                    sock.bind(self.bind)
+                                except Exception, e:
+                                    error_handler(e, "failed binding on socket", target, sock)
+                                    continue
+
+                            try:
+                                sock.settimeout(self.timeout)
+                                sock.connect((target.host, target.port))
+                            except Exception, e:
+                                error_handler(e, "failed connecting on socket", target, sock)
+                                continue
+                                
+                        elif self.wifi and self.wifi_iface:
+                            ETH_P_ALL = 3
+                            try:
+                                sock = socket.socket(socket.AF_PACKET, self.proto, socket.htons(ETH_P_ALL))
+                            except Exception, e:
+                                error_handler(e, "failed creating socket", target)
+                            try:
+                                sock.bind((self.wifi_iface, ETH_P_ALL))
+                            except Exception, e:
+                                error_handler(e, "failed binding on socket", target, sock)
 
                         # if SSL is requested, then enable it.
                         if self.ssl:
