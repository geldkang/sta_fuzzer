diff -Nur --strip-trailing-cr sulley/sulley/blocks.py sulley.truncate_patch/sulley/blocks.py
--- sulley/sulley/blocks.py	2012-08-23 23:06:53.135769050 +0200
+++ sulley.truncate_patch/sulley/blocks.py	2012-08-23 23:05:55.419482856 +0200
@@ -76,7 +76,12 @@
         if not self.block_stack:
             raise sex.error("BLOCK STACK OUT OF SYNC")
 
-        self.block_stack.pop()
+        b = self.block_stack.pop()
+        
+        # if block truncate parameter is True, initialize some variable
+        # we have to do this here, because all items of the block must be on the stack
+        if b.truncate:
+            b.init_truncate()
 
 
     def push (self, item):
@@ -183,7 +188,7 @@
 
 ########################################################################################################################
 class block:
-    def __init__ (self, name, request, group=None, encoder=None, dep=None, dep_value=None, dep_values=[], dep_compare="=="):
+    def __init__ (self, name, request, group=None, encoder=None, dep=None, dep_value=None, dep_values=[], dep_compare="==", truncate=False):
         '''
         The basic building block. Can contain primitives, sizers, checksums or other blocks.
 
@@ -203,6 +208,8 @@
         @param dep_values:  (Optional, def=[]) Values that field "dep" may contain for block to be rendered
         @type  dep_compare: String
         @param dep_compare: (Optional, def="==") Comparison method to apply to dependency (==, !=, >, >=, <, <=)
+        @type  truncate:    Boolean
+        @param truncate:    (Optional, def=False) Enable/disable truncating of this block        
         '''
 
         self.name          = name
@@ -213,6 +220,7 @@
         self.dep_value     = dep_value
         self.dep_values    = dep_values
         self.dep_compare   = dep_compare
+        self.truncate      = truncate
 
         self.stack         = []     # block item stack.
         self.rendered      = ""     # rendered block contents.
@@ -220,7 +228,22 @@
         self.group_idx     = 0      # if this block is tied to a group, the index within that group.
         self.fuzz_complete = False  # whether or not we are done fuzzing this block.
         self.mutant_index  = 0      # current mutation index.
-
+        
+        if self.truncate:
+            self.truncate_size     = 0      # not mutated block size
+            self.truncate_rendered = None   # not mutated block
+            self.truncate_complete = False  # whether or not we are done truncating this block
+
+
+    def init_truncate (self):
+        '''
+        Initialize self.truncate_rendered, must be done after all items are pushed on the stack
+        '''
+        
+        self.truncate = False
+        self.render()
+        self.truncate = True
+        self.truncate_rendered = self.rendered
 
     def mutate (self):
         mutated = False
@@ -228,6 +251,15 @@
         # are we done with this block?
         if self.fuzz_complete:
             return False
+            
+        if self.truncate and not self.truncate_complete:
+            if self.truncate_size == len(self.truncate_rendered):
+                self.truncate_complete = True
+            else:
+                self.request.mutant = self
+                self.truncate_size += 1
+                item = self
+                mutated = True
 
         #
         # mutate every item on the stack for every possible group value.
@@ -339,6 +371,9 @@
         # if this block is associated with a group, then multiply out the number of possible mutations.
         if self.group:
             num_mutations *= len(self.request.names[self.group].values)
+            
+        if self.truncate:
+            num_mutations += len(self.truncate_rendered)
 
         return num_mutations
 
@@ -421,6 +456,10 @@
             for item in self.request.callbacks[self.name]:
                 item.render()
 
+        # the block is truncated (only if the block started to be mutate).
+        if self.truncate and not self.truncate_complete and self.truncate_size > 0:
+            self.rendered = self.rendered[0:self.truncate_size-1]
+            
 
     def reset (self):
         '''
@@ -429,6 +468,9 @@
 
         self.fuzz_complete = False
         self.group_idx     = 0
+        
+        self.truncate_complete = False
+        self.truncate_size     = 0
 
         for item in self.stack:
             if item.fuzzable:
diff -Nur --strip-trailing-cr sulley/sulley/__init__.py sulley.truncate_patch/sulley/__init__.py
--- sulley/sulley/__init__.py	2012-08-23 23:06:53.135769050 +0200
+++ sulley.truncate_patch/sulley/__init__.py	2012-08-23 22:47:25.277977962 +0200
@@ -112,7 +112,7 @@
 ### BLOCK MANAGEMENT
 ########################################################################################################################
 
-def s_block_start (name, group=None, encoder=None, dep=None, dep_value=None, dep_values=[], dep_compare="=="):
+def s_block_start (name, group=None, encoder=None, dep=None, dep_value=None, dep_values=[], dep_compare="==", truncate=False):
     '''
     Open a new block under the current request. This routine always returns True so you can make your fuzzer pretty
     with indenting::
@@ -136,9 +136,11 @@
     @param dep_values:  (Optional, def=[]) Values that field "dep" may contain for block to be rendered
     @type  dep_compare: String
     @param dep_compare: (Optional, def="==") Comparison method to use on dependency (==, !=, >, >=, <, <=)
+    @type  truncate:    Boolean
+    @param truncate:    (Optional, def=False) Enable/disable truncating of this block
     '''
 
-    block = blocks.block(name, blocks.CURRENT, group, encoder, dep, dep_value, dep_values, dep_compare)
+    block = blocks.block(name, blocks.CURRENT, group, encoder, dep, dep_value, dep_values, dep_compare, truncate)
     blocks.CURRENT.push(block)
 
     return True
